{"ast":null,"code":"const BASE_API_URL = process.env.REACT_APP_BASE_API_URL;\nexport default class MicroblogAPIClient {\n  constructor() {\n    this.base_url = BASE_API_URL + '/api';\n  }\n  async request(options) {\n    let query = new URLSearchParams(options.query || {}).toString();\n    if (query !== '') {\n      query = '?' + query;\n    }\n    let response;\n    try {\n      response = await fetch(this.base_url + options.url + query, {\n        method: options.method,\n        headers: {\n          'Content-Type': 'application/json',\n          ...options.headers\n        },\n        body: options.body ? JSON.stringify(options.body) : null\n      });\n    } catch (error) {\n      response = {\n        ok: false,\n        status: 500,\n        json: async () => {\n          return {\n            code: 500,\n            message: 'The server is unresponsive',\n            description: error.toString()\n          };\n        }\n      };\n    }\n    return {\n      ok: response.ok,\n      status: response.status,\n      body: response.status !== 204 ? await response.json() : null\n    };\n  }\n  async get(url, query, options) {\n    return this.request({\n      method: 'GET',\n      url,\n      query,\n      ...options\n    });\n  }\n  async post(url, body, options) {\n    return this.request({\n      method: 'POST',\n      url,\n      body,\n      ...options\n    });\n  }\n  async put(url, body, options) {\n    return this.request({\n      method: 'PUT',\n      url,\n      body,\n      ...options\n    });\n  }\n  async delete(url, options) {\n    return this.request({\n      method: 'DELETE',\n      url,\n      ...options\n    });\n  }\n}","map":{"version":3,"names":["BASE_API_URL","process","env","REACT_APP_BASE_API_URL","MicroblogAPIClient","constructor","base_url","request","options","query","URLSearchParams","toString","response","fetch","url","method","headers","body","JSON","stringify","error","ok","status","json","code","message","description","get","post","put","delete"],"sources":["/home/arnold/projects/react-microblog/src/MicroblogAPIClient.js"],"sourcesContent":["const BASE_API_URL = process.env.REACT_APP_BASE_API_URL;\n\nexport default class MicroblogAPIClient {\n    constructor() {\n        this.base_url = BASE_API_URL + '/api';\n    }\n\n    async request(options) {\n        let query = new URLSearchParams(options.query || {}).toString();\n        if (query !== '') {\n            query = '?' + query;\n        }\n\n        let response;\n\n        try {\n            response = await fetch(this.base_url + options.url + query, {\n                method: options.method,\n                headers: {\n                    'Content-Type': 'application/json',\n                    ...options.headers,\n                },\n                body: options.body ? JSON.stringify(options.body) : null,\n            });\n        }\n        catch (error) {\n            response = {\n                ok: false,\n                status: 500,\n                json: async () => {\n                    return {\n                        code: 500,\n                        message: 'The server is unresponsive',\n                        description: error.toString(),\n                    };\n                }\n            };\n        }\n\n        return {\n            ok: response.ok,\n            status: response.status,\n            body: response.status !== 204 ? await response.json() : null\n        };\n    }\n\n    async get(url, query, options) {\n        return this.request({ method: 'GET', url, query, ...options });\n    }\n\n    async post(url, body, options) {\n        return this.request({ method: 'POST', url, body, ...options });\n    }\n\n    async put(url, body, options) {\n        return this.request({ method: 'PUT', url, body, ...options });\n    }\n\n    async delete(url, options) {\n        return this.request({ method: 'DELETE', url, ...options });\n    }\n}"],"mappings":"AAAA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB;AAEvD,eAAe,MAAMC,kBAAkB,CAAC;EACpCC,WAAW,GAAG;IACV,IAAI,CAACC,QAAQ,GAAGN,YAAY,GAAG,MAAM;EACzC;EAEA,MAAMO,OAAO,CAACC,OAAO,EAAE;IACnB,IAAIC,KAAK,GAAG,IAAIC,eAAe,CAACF,OAAO,CAACC,KAAK,IAAI,CAAC,CAAC,CAAC,CAACE,QAAQ,EAAE;IAC/D,IAAIF,KAAK,KAAK,EAAE,EAAE;MACdA,KAAK,GAAG,GAAG,GAAGA,KAAK;IACvB;IAEA,IAAIG,QAAQ;IAEZ,IAAI;MACAA,QAAQ,GAAG,MAAMC,KAAK,CAAC,IAAI,CAACP,QAAQ,GAAGE,OAAO,CAACM,GAAG,GAAGL,KAAK,EAAE;QACxDM,MAAM,EAAEP,OAAO,CAACO,MAAM;QACtBC,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB;UAClC,GAAGR,OAAO,CAACQ;QACf,CAAC;QACDC,IAAI,EAAET,OAAO,CAACS,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACX,OAAO,CAACS,IAAI,CAAC,GAAG;MACxD,CAAC,CAAC;IACN,CAAC,CACD,OAAOG,KAAK,EAAE;MACVR,QAAQ,GAAG;QACPS,EAAE,EAAE,KAAK;QACTC,MAAM,EAAE,GAAG;QACXC,IAAI,EAAE,YAAY;UACd,OAAO;YACHC,IAAI,EAAE,GAAG;YACTC,OAAO,EAAE,4BAA4B;YACrCC,WAAW,EAAEN,KAAK,CAACT,QAAQ;UAC/B,CAAC;QACL;MACJ,CAAC;IACL;IAEA,OAAO;MACHU,EAAE,EAAET,QAAQ,CAACS,EAAE;MACfC,MAAM,EAAEV,QAAQ,CAACU,MAAM;MACvBL,IAAI,EAAEL,QAAQ,CAACU,MAAM,KAAK,GAAG,GAAG,MAAMV,QAAQ,CAACW,IAAI,EAAE,GAAG;IAC5D,CAAC;EACL;EAEA,MAAMI,GAAG,CAACb,GAAG,EAAEL,KAAK,EAAED,OAAO,EAAE;IAC3B,OAAO,IAAI,CAACD,OAAO,CAAC;MAAEQ,MAAM,EAAE,KAAK;MAAED,GAAG;MAAEL,KAAK;MAAE,GAAGD;IAAQ,CAAC,CAAC;EAClE;EAEA,MAAMoB,IAAI,CAACd,GAAG,EAAEG,IAAI,EAAET,OAAO,EAAE;IAC3B,OAAO,IAAI,CAACD,OAAO,CAAC;MAAEQ,MAAM,EAAE,MAAM;MAAED,GAAG;MAAEG,IAAI;MAAE,GAAGT;IAAQ,CAAC,CAAC;EAClE;EAEA,MAAMqB,GAAG,CAACf,GAAG,EAAEG,IAAI,EAAET,OAAO,EAAE;IAC1B,OAAO,IAAI,CAACD,OAAO,CAAC;MAAEQ,MAAM,EAAE,KAAK;MAAED,GAAG;MAAEG,IAAI;MAAE,GAAGT;IAAQ,CAAC,CAAC;EACjE;EAEA,MAAMsB,MAAM,CAAChB,GAAG,EAAEN,OAAO,EAAE;IACvB,OAAO,IAAI,CAACD,OAAO,CAAC;MAAEQ,MAAM,EAAE,QAAQ;MAAED,GAAG;MAAE,GAAGN;IAAQ,CAAC,CAAC;EAC9D;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}