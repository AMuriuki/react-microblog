{"ast":null,"code":"import { useState, useEffect } from 'react';\nconst secondsTable = [['year', 60 * 60 * 24 * 365], ['month', 60 * 60 * 24 * 30], ['week', 60 * 60 * 24 * 7], ['day', 60 * 60 * 24], ['hour', 60 * 60], ['minute', 60]];\nconst rtf = new Intl.RelativeTimeFormat(undefined, {\n  numeric: 'auto'\n});\nfunction getTimeAgo(date) {\n  const seconds = Math.round((date.getTime() - new Date().getTime()) / 1000);\n  const absSeconds = Math.abs(seconds);\n  let bestUnit, bestTime, bestInterval;\n  for (let [unit, unitSeconds] of secondsTable) {\n    if (absSeconds >= unitSeconds) {\n      bestUnit = unit;\n      bestTime = Math.round(seconds / unitSeconds);\n      bestInterval = unitSeconds / 2;\n      break;\n    }\n  }\n  ;\n  if (!bestUnit) {\n    bestUnit = 'second';\n    bestTime = parseInt(seconds / 10) * 10;\n    bestInterval = 10;\n  }\n  return [bestTime, best];\n}\nexport default function TimeAgo(_ref) {\n  let {\n    isoDate\n  } = _ref;\n} //TODO\n_c = TimeAgo;\nvar _c;\n$RefreshReg$(_c, \"TimeAgo\");","map":{"version":3,"names":["useState","useEffect","secondsTable","rtf","Intl","RelativeTimeFormat","undefined","numeric","getTimeAgo","date","seconds","Math","round","getTime","Date","absSeconds","abs","bestUnit","bestTime","bestInterval","unit","unitSeconds","parseInt","best","TimeAgo","isoDate"],"sources":["/home/arnold/projects/react-microblog/src/components/TimeAgo.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nconst secondsTable = [\n    ['year', 60 * 60 * 24 * 365],\n    ['month', 60 * 60 * 24 * 30],\n    ['week', 60 * 60 * 24 * 7],\n    ['day', 60 * 60 * 24],\n    ['hour', 60 * 60],\n    ['minute', 60]\n];\n\nconst rtf = new Intl.RelativeTimeFormat(undefined, { numeric: 'auto' });\n\nfunction getTimeAgo(date) {\n    const seconds = Math.round((date.getTime() - new Date().getTime()) / 1000);\n    const absSeconds = Math.abs(seconds);\n    let bestUnit, bestTime, bestInterval;\n    for (let [unit, unitSeconds] of secondsTable) {\n        if (absSeconds >= unitSeconds) {\n            bestUnit = unit;\n            bestTime = Math.round(seconds / unitSeconds);\n            bestInterval = unitSeconds / 2;\n            break;\n        }\n    };\n    if (!bestUnit) {\n        bestUnit = 'second';\n        bestTime = parseInt(seconds / 10) * 10;\n        bestInterval = 10;\n    }\n    return [bestTime, best]\n}\n\nexport default function TimeAgo({ isoDate }) {\n    //TODO\n}"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,YAAY,GAAG,CACjB,CAAC,MAAM,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,EAC5B,CAAC,OAAO,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAC5B,CAAC,MAAM,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAC1B,CAAC,KAAK,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EACrB,CAAC,MAAM,EAAE,EAAE,GAAG,EAAE,CAAC,EACjB,CAAC,QAAQ,EAAE,EAAE,CAAC,CACjB;AAED,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAACC,kBAAkB,CAACC,SAAS,EAAE;EAAEC,OAAO,EAAE;AAAO,CAAC,CAAC;AAEvE,SAASC,UAAU,CAACC,IAAI,EAAE;EACtB,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAAC,CAACH,IAAI,CAACI,OAAO,EAAE,GAAG,IAAIC,IAAI,EAAE,CAACD,OAAO,EAAE,IAAI,IAAI,CAAC;EAC1E,MAAME,UAAU,GAAGJ,IAAI,CAACK,GAAG,CAACN,OAAO,CAAC;EACpC,IAAIO,QAAQ,EAAEC,QAAQ,EAAEC,YAAY;EACpC,KAAK,IAAI,CAACC,IAAI,EAAEC,WAAW,CAAC,IAAInB,YAAY,EAAE;IAC1C,IAAIa,UAAU,IAAIM,WAAW,EAAE;MAC3BJ,QAAQ,GAAGG,IAAI;MACfF,QAAQ,GAAGP,IAAI,CAACC,KAAK,CAACF,OAAO,GAAGW,WAAW,CAAC;MAC5CF,YAAY,GAAGE,WAAW,GAAG,CAAC;MAC9B;IACJ;EACJ;EAAC;EACD,IAAI,CAACJ,QAAQ,EAAE;IACXA,QAAQ,GAAG,QAAQ;IACnBC,QAAQ,GAAGI,QAAQ,CAACZ,OAAO,GAAG,EAAE,CAAC,GAAG,EAAE;IACtCS,YAAY,GAAG,EAAE;EACrB;EACA,OAAO,CAACD,QAAQ,EAAEK,IAAI,CAAC;AAC3B;AAEA,eAAe,SAASC,OAAO,OAAc;EAAA,IAAb;IAAEC;EAAQ,CAAC;AAE3C,CAAC,CADG;AACH,KAFuBD,OAAO;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}